
import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";
import type { ModelImage, ClothingItem } from '../types';

export const generateOutfit = async (
  model: ModelImage,
  top: ClothingItem,
  bottom: ClothingItem
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }

  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const modelImagePart = {
    inlineData: { data: model.base64, mimeType: model.mimeType },
  };

  const topImagePart = {
    inlineData: { data: top.base64, mimeType: top.mimeType },
  };

  const bottomImagePart = {
    inlineData: { data: bottom.base64, mimeType: bottom.mimeType },
  };

  const textPart = {
    text: `Take the person from the first image, the top from the second image, and the trousers/skirt from the third image. Generate a new image of the person wearing both the top and the bottom clothing items. Maintain the person's pose, face, and the background from the first image. The final image should be realistic.`,
  };

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [modelImagePart, topImagePart, bottomImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }

    throw new Error("No image was generated by the AI model.");
  } catch (error) {
    console.error("Error generating outfit with Gemini API:", error);
    throw new Error("Failed to generate outfit. The model may have refused the request due to safety policies or other issues.");
  }
};
