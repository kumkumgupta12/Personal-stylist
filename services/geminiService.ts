import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";
import type { ModelImage, ClothingItem, AccessoryItem, OutfitResult } from '../types';

const getAi = () => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
  }
  return new GoogleGenAI({ apiKey: process.env.API_KEY });
};

// Common function to handle the API call and response parsing
const generateImageFromApi = async (parts: any[]): Promise<string> => {
  const ai = getAi();
  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: { parts },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
        temperature: 0.8,         // 0 = deterministic, 1 = creative
        topP: 0.9,
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
    throw new Error("No image was generated by the AI model.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    throw new Error(`Failed to generate image. The model may have refused the request due to safety policies or other issues. Details: ${errorMessage}`);
  }
};

export const generateTopAndBottomOutfit = async (
  model: ModelImage,
  top: ClothingItem,
  bottom: ClothingItem
): Promise<string> => {
  const parts: any[] = [
    { inlineData: { data: model.base64, mimeType: model.mimeType } },
    { inlineData: { data: top.base64, mimeType: top.mimeType } },
    { inlineData: { data: bottom.base64, mimeType: bottom.mimeType } },
    {
      text: `Your task is a virtual try-on. Start with the person in the first image. 
You must completely REMOVE all of their original clothing (both top and bottom) so that it is no longer visible, 
and then REPLACE it with the new items provided.

1. Replace the person's top with the clothing item from the second image. 
2. Replace the person's bottom with the clothing item from the third image. 
Do not overlay or layer new clothes on top of the old ones â€” the original outfit must be erased completely.

It is crucial that you preserve the exact appearance, texture, color, and design of the new top and bottom clothing items. 
Do not alter or stylize the new clothing in any way. 

Maintain the person's original body, face, hair, pose, and background from the first image. 
Ensure the final image is a single, photorealistic picture of the person wearing ONLY the new clothes.

IMPORTANT:
1. The final image must show the full person with their head and face fully visible (not cropped or cut off).  
2. Remove ALL traces of the old outfit (such as sleeves, collars, jeans patterns, or fabric outlines).  
3. Blend the new clothes seamlessly so they look naturally worn by the person.`}
  ];

  return generateImageFromApi(parts);
};

export const generateFullBodyOutfit = async (
  model: ModelImage,
  dress: ClothingItem,
): Promise<string> => {
  const parts: any[] = [
    { inlineData: { data: model.base64, mimeType: model.mimeType } },
    { inlineData: { data: dress.base64, mimeType: dress.mimeType } },
    {
      text: `Your task is a virtual try-on. Start with the person in the first image. You must **completely remove their original clothing** and replace it with the full-body outfit from the second image. It is crucial that you preserve the exact appearance, texture, color, and design of the new outfit. Do not alter the new clothing in any way. Maintain the person's original pose, body, face, and the background from the first image. The final output should be a single, photorealistic image of the person wearing ONLY the new outfit.
IMPORTANT: Ensure the final image shows the full person and that their head and face are completely visible, not cropped or cut off in any way.` }
  ];

  return generateImageFromApi(parts);
};

export const addAccessories = async (
  baseImage: ModelImage,
  accessories: AccessoryItem[],
  outfitDetails: Pick<OutfitResult, 'top' | 'bottom' | 'dress'>
): Promise<string> => {
  const parts: any[] = [{ inlineData: { data: baseImage.base64, mimeType: baseImage.mimeType } }];
  accessories.forEach(acc => {
    parts.push({ inlineData: { data: acc.base64, mimeType: acc.mimeType } });
  });

  const accessoryNames = accessories.map(a => a.name).join(', ');

  let outfitDescription = 'their current outfit';
  if (outfitDetails.dress) {
    outfitDescription = 'a full-body dress';
  } else if (outfitDetails.top && outfitDetails.bottom) {
    outfitDescription = 'a top and bottom combination';
  }

  parts.push({
    text: `The person in the first image is wearing ${outfitDescription}. Your task is to add accessories to this person. **Do not alter the person or their existing clothing.** You must add the accessories from the subsequent images (${accessoryNames}) to the person in a photorealistic way. Place each accessory in its natural location (e.g., shoes on feet, sunglasses on face). Maintain the original image's quality, pose, and background. The final output should be a single, photorealistic image of the person wearing their original outfit plus all the new accessories.`
  });

  return generateImageFromApi(parts);
};
